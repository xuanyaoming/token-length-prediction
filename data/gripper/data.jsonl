[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the gripper to the right of the vase"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the right of the vase')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "push the block on the right side of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('block on the right side of the table')\naffordance_map = get_affordance_map('a point 10cm into the block')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the toy car from the floor"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the toy car')\nvelocity_map = get_velocity_map('slow down when near the toy car')\ngripper_map = get_gripper_map('open everywhere except 1cm around the toy car')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "place the book on the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the shelf')\ngripper_map = get_gripper_map('close everywhere but open when on top of the shelf')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the center of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "knock over the red block"}, {"role": "assistant", "content": "movable = parse_query_obj('red block')\naffordance_map = get_affordance_map('a point 10cm into the red block')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the drawer handle by 10cm"}, {"role": "assistant", "content": "movable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 10cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the cup from the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the cup')\ngripper_map = get_gripper_map('open everywhere except 1cm around the cup')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "wipe the surface of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the surface of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "turn the knob clockwise by 90 degrees"}, {"role": "assistant", "content": "movable = parse_query_obj('knob')\nrotation_map = get_rotation_map('turn clockwise by 90 degrees')\nexecute(movable, rotation_map=rotation_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the plate to the front edge of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('plate')\naffordance_map = get_affordance_map('a point on the front edge of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "go to the back side of the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the shelf')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "open the topmost drawer"}, {"role": "assistant", "content": "movable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the green block to the left of the blue block"}, {"role": "assistant", "content": "movable = parse_query_obj('green block')\naffordance_map = get_affordance_map('a point 10cm to the left of the blue block')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the pencil from the desk"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the pencil')\ngripper_map = get_gripper_map('open everywhere except 1cm around the pencil')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "wipe the mirror"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the mirror')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the front of the bookshelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the front of the bookshelf')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "push the chair away from the table"}, {"role": "assistant", "content": "movable = parse_query_obj('chair')\naffordance_map = get_affordance_map('a point 10cm away from the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the toy from the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the toy')\ngripper_map = get_gripper_map('open everywhere except 1cm around the toy')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the vase to the left edge of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('vase')\naffordance_map = get_affordance_map('a point on the left edge of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "close the drawer by 5cm"}, {"role": "assistant", "content": "movable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the top of the book"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the book')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "grasp the handle of the door"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the door handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the door handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "push the box to the corner of the room"}, {"role": "assistant", "content": "movable = parse_query_obj('box')\naffordance_map = get_affordance_map('a point in the corner of the room')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the flower from the pot"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the flower')\ngripper_map = get_gripper_map('open everywhere except 1cm around the flower')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the stapler to the right of the computer"}, {"role": "assistant", "content": "movable = parse_query_obj('stapler')\naffordance_map = get_affordance_map('a point 10cm to the right of the computer')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "go to the edge of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the edge of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "turn the wheel clockwise by 45 degrees"}, {"role": "assistant", "content": "movable = parse_query_obj('wheel')\nrotation_map = get_rotation_map('turn clockwise by 45 degrees')\nexecute(movable, rotation_map=rotation_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the small block from the floor"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the small block')\ngripper_map = get_gripper_map('open everywhere except 1cm around the small block')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the cup to the left of the plate"}, {"role": "assistant", "content": "movable = parse_query_obj('cup')\naffordance_map = get_affordance_map('a point 10cm to the left of the plate')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "open the fridge door"}, {"role": "assistant", "content": "movable = parse_query_obj('fridge door handle')\naffordance_map = get_affordance_map('a point 30cm into the fridge door handle')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the book to the top shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('book')\naffordance_map = get_affordance_map('a point on the top shelf')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the toy car from the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the toy car')\ngripper_map = get_gripper_map('open everywhere except 1cm around the toy car')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the vase to the center of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('vase')\naffordance_map = get_affordance_map('a point at the center of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "close the laptop lid"}, {"role": "assistant", "content": "movable = parse_query_obj('laptop lid')\naffordance_map = get_affordance_map('a point 10cm into the laptop lid')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the back side of the cabinet"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the cabinet')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "grasp the handle of the cabinet"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the cabinet handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the cabinet handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the block to the right of the red box"}, {"role": "assistant", "content": "movable = parse_query_obj('block')\naffordance_map = get_affordance_map('a point 10cm to the right of the red box')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the small toy from the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the small toy')\ngripper_map = get_gripper_map('open everywhere except 1cm around the small toy')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the front edge of the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the front edge of the shelf')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "push the blue block to the left side of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('blue block')\naffordance_map = get_affordance_map('a point on the left side of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "turn the light switch off"}, {"role": "assistant", "content": "movable = parse_query_obj('light switch')\nrotation_map = get_rotation_map('turn off')\nexecute(movable, rotation_map=rotation_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the plate to the back side of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('plate')\naffordance_map = get_affordance_map('a point on the back side of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the paper from the floor"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the paper')\ngripper_map = get_gripper_map('open everywhere except 1cm around the paper')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the box to the corner of the room"}, {"role": "assistant", "content": "movable = parse_query_obj('box')\naffordance_map = get_affordance_map('a point in the corner of the room')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "turn the faucet clockwise by 90 degrees"}, {"role": "assistant", "content": "movable = parse_query_obj('faucet')\nrotation_map = get_rotation_map('turn clockwise by 90 degrees')\nexecute(movable, rotation_map=rotation_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the small block to the top of the book"}, {"role": "assistant", "content": "movable = parse_query_obj('small block')\naffordance_map = get_affordance_map('a point 10cm above the book')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the cup from the table"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the cup')\ngripper_map = get_gripper_map('open everywhere except 1cm around the cup')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the vase to the right edge of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('vase')\naffordance_map = get_affordance_map('a point on the right edge of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "go to the back side of the door"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the door')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "push the block to the left side of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('block')\naffordance_map = get_affordance_map('a point on the left side of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "grasp the handle of the cabinet door"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the cabinet door handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the cabinet door handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move to the top of the shelf"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the top of the shelf')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "pick up the pencil from the desk"}, {"role": "assistant", "content": "movable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the pencil')\ngripper_map = get_gripper_map('open everywhere except 1cm around the pencil')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "move the cup to the center of the table"}, {"role": "assistant", "content": "movable = parse_query_obj('cup')\naffordance_map = get_affordance_map('a point at the center of the table')\nexecute(movable, affordance_map=affordance_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute, reset_to_default_pose\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_affordance_map, get_avoidance_map, get_velocity_map, get_rotation_map, get_gripper_map\n\n# Query: move ee forward for 10cm.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map(f'a point 10cm in front of {movable.position}')\nexecute(movable, affordance_map)\n\n# Query: go back to default.\nreset_to_default_pose()\n\n# Query: move the gripper behind the bowl, and slow down when near the bowl.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm behind the bowl')\navoidance_map = get_avoidance_map('10cm near the bowl')\nvelocity_map = get_velocity_map('slow down when near the bowl')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: move to the back side of the table while staying at least 5cm from the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point on the back side of the table')\navoidance_map = get_avoidance_map('5cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: move to the top of the plate and face the plate.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the plate')\nrotation_map = get_rotation_map('face the plate')\nexecute(movable, affordance_map=affordance_map, rotation_map=rotation_map)\n\n# Query: drop the toy inside container.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 15cm above the container')\ngripper_map = get_gripper_map('close everywhere but open when on top of the container')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: push close the topmost drawer.\nmovable = parse_query_obj('topmost drawer handle')\naffordance_map = get_affordance_map('a point 30cm into the topmost drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: push the second to the left block along the red line.\nmovable = parse_query_obj('second to the left block')\naffordance_map = get_affordance_map('the red line')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: grasp the blue block from the table at a quarter of the speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of blue block')\nvelocity_map = get_velocity_map('quarter of the speed')\ngripper_map = get_gripper_map('open everywhere except 1cm around the blue block')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, gripper_map=gripper_map)\n\n# Query: move to the left of the brown block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm to the left of the brown block')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to the top of the tray that contains the lemon.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above the tray that contains the lemon')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: close drawer by 5cm.\nmovable = parse_query_obj('drawer handle')\naffordance_map = get_affordance_map('a point 5cm into the drawer handle')\nexecute(movable, affordance_map=affordance_map)\n\n# Query: move to 5cm on top of the soda can, at 0.5x speed when within 20cm of the wooden mug, and keep at least 15cm away from the wooden mug.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 5cm above the soda can')\navoidance_map = get_avoidance_map('15cm from the wooden mug')\nvelocity_map = get_velocity_map('0.5x speed when within 20cm of the wooden mug')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: wipe the red dot but avoid the blue block.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('the red dot')\navoidance_map = get_avoidance_map('10cm from the blue block')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map)\n\n# Query: grasp the mug from the shelf.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the mug handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the mug handle')\nexecute(movable, affordance_map=affordance_map, gripper_map=gripper_map)\n\n# Query: move to 10cm on top of the soup bowl, and 5cm to the left of the soup bowl, while away from the glass, at 0.75x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point 10cm above and 5cm to the left of the soup bowl')\navoidance_map = get_avoidance_map('10cm from the glass')\nvelocity_map = get_velocity_map('0.75x speed')\nexecute(movable, affordance_map=affordance_map, avoidance_map=avoidance_map, velocity_map=velocity_map)\n\n# Query: open gripper.\nmovable = parse_query_obj('gripper')\ngripper_map = get_gripper_map('open everywhere')\nexecute(movable, gripper_map=gripper_map)\n\n# Query: turn counter-clockwise by 180 degrees.\nmovable = parse_query_obj('gripper')\nrotation_map = get_rotation_map('turn counter-clockwise by 180 degrees')\nexecute(movable, rotation_map=rotation_map)\n\n# Query: sweep all particles to the left side of the table.\nparticles = parse_query_obj('particles')\nfor particle in particles:\n    movable = particle\n    affordance_map = get_affordance_map('a point on the left side of the table')\n    execute(particle, affordance_map=affordance_map)\n\n# Query: grasp the bottom drawer handle while moving at 0.5x speed.\nmovable = parse_query_obj('gripper')\naffordance_map = get_affordance_map('a point at the center of the bottom drawer handle')\nvelocity_map = get_velocity_map('0.5x speed')\nrotation_map = get_rotation_map('face the bottom drawer handle')\ngripper_map = get_gripper_map('open everywhere except 1cm around the bottom drawer handle')\nexecute(movable, affordance_map=affordance_map, velocity_map=velocity_map, rotation_map=rotation_map, gripper_map=gripper_map)\n```\n"}, {"role": "user", "content": "turn the wheel counter-clockwise by 45 degrees"}, {"role": "assistant", "content": "movable = parse_query_obj('wheel')\nrotation_map = get_rotation_map('turn counter-clockwise by 45 degrees')\nexecute(movable, rotation_map=rotation_map)\n"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm in front of [20, 30, 40]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 20 + cm2index(15, 'x')\ny = 30\nz = 40\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the left side of the table"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = center_x\ny = min_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 25cm to the right of the red block"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_block = parse_query_obj('red block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_block.aabb\ncenter_x, center_y, center_z = red_block.position\nx = center_x\ny = max_y + cm2index(25, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 5cm below the green cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_cylinder = parse_query_obj('green cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_cylinder.aabb\ncenter_x, center_y, center_z = green_cylinder.position\nx = center_x\ny = center_y\nz = min_z - cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 18cm away from the blue circle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nmoving_dir = blue_circle.normal\naffordance_xyz = blue_circle.position + cm2index(18, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 3cm to the right of and 12cm on top of the yellow box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_box = parse_query_obj('yellow box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_box.aabb\ncenter_x, center_y, center_z = yellow_box.position\nx = center_x\ny = min_y + cm2index(3, 'y')\nz = max_z + cm2index(12, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 8cm above the front edge of the table"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = center_y\nz = max_z + cm2index(8, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the back side of the orange container"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\norange_container = parse_query_obj('orange container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = orange_container.aabb\ncenter_x, center_y, center_z = orange_container.position\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 2cm to the left of and 6cm below the purple bottle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\npurple_bottle = parse_query_obj('purple bottle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = purple_bottle.aabb\ncenter_x, center_y, center_z = purple_bottle.position\nx = center_x\ny = min_y - cm2index(2, 'y')\nz = min_z - cm2index(6, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm into the topmost drawer handle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(15, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the front right corner of the table"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm above the red block"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_block = parse_query_obj('red block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_block.aabb\ncenter_x, center_y, center_z = red_block.position\nx = center_x\ny = center_y\nz = max_z + cm2index(12, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 10cm away from the blue block"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\nmoving_dir = blue_block.normal\naffordance_xyz = blue_block.position + cm2index(10, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 4cm to the right of and 8cm on top of the green cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_cylinder = parse_query_obj('green cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_cylinder.aabb\ncenter_x, center_y, center_z = green_cylinder.position\nx = center_x\ny = min_y + cm2index(4, 'y')\nz = max_z + cm2index(8, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 20cm in front of [30, 40, 50]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 30 + cm2index(20, 'x')\ny = 40\nz = 50\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the left side of the yellow bowl"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\nx = center_x\ny = min_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 18cm to the right of the brown box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nbrown_box = parse_query_obj('brown box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_box.aabb\ncenter_x, center_y, center_z = brown_box.position\nx = center_x\ny = max_y + cm2index(18, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 3cm above and 2cm to the left of the red circle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_circle = parse_query_obj('red circle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_circle.aabb\ncenter_x, center_y, center_z = red_circle.position\nx = center_x\ny = min_y - cm2index(2, 'y')\nz = max_z + cm2index(3, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm away from the orange container"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\norangef_container = parse_query_obj('orange container')\nmoving_dir = orange_container.normal\naffordance_xyz = orange_container.position + cm2index(15, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 10cm to the left of [20, 30, 40]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 20\ny = 30 - cm2index(10, 'y')\nz = 40\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the back side of the blue circle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_circle.aabb\ncenter_x, center_y, center_z = blue_circle.position\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm on top of the green box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_box = parse_query_obj('green box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_box.aabb\ncenter_x, center_y, center_z = green_box.position\nx = center_x\ny = center_y\nz = max_z + cm2index(12, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 5cm to the right of the purple bottle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\npurple_bottle = parse_query_obj('purple bottle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = purple_bottle.aabb\ncenter_x, center_y, center_z = purple_bottle.position\nx = center_x\ny = min_y + cm2index(5, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 20cm into the bottommost drawer handle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nbottom_handle = parse_query_obj('bottommost drawer handle')\nmoving_dir = -bottom_handle.normal\naffordance_xyz = bottom_handle.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the front left corner of the table"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm above the yellow box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_box = parse_query_obj('yellow box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_box.aabb\ncenter_x, center_y, center_z = yellow_box.position\nx = center_x\ny = center_y\nz = max_z + cm2index(15, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 8cm away from the blue block"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\nmoving_dir = blue_block.normal\naffordance_xyz = blue_block.position + cm2index(8, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 4cm to the left of and 10cm on top of the red cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_cylinder = parse_query_obj('red cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_cylinder.aabb\ncenter_x, center_y, center_z = red_cylinder.position\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 25cm in front of [40, 50, 60]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 40 + cm2index(25, 'x')\ny = 50\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the right side of the green cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_cylinder = parse_query_obj('green cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_cylinder.aabb\ncenter_x, center_y, center_z = green_cylinder.position\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm to the right of the yellow box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_box = parse_query_obj('yellow box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_box.aabb\ncenter_x, center_y, center_z = yellow_box.position\nx = center_x\ny = max_y + cm2index(12, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 18cm above and 3cm to the right of the blue block"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\nx = center_x\ny = min_y + cm2index(3, 'y')\nz = max_z + cm2index(18, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm away from the orange container"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\norangef_container = parse_query_obj('orange container')\nmoving_dir = orange_container.normal\naffordance_xyz = orange_container.position + cm2index(15, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 10cm to the right of [50, 60, 70]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 50\ny = 60 + cm2index(10, 'y')\nz = 70\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the back side of the yellow bowl"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm on top of the red box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_box = parse_query_obj('red box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_box.aabb\ncenter_x, center_y, center_z = red_box.position\nx = center_x\ny = center_y\nz = max_z + cm2index(12, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 5cm to the left of the purple cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\npurple_cylinder = parse_query_obj('purple cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = purple_cylinder.aabb\ncenter_x, center_y, center_z = purple_cylinder.position\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 20cm into the middle drawer handle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nmiddle_handle = parse_query_obj('middle drawer handle')\nmoving_dir = -middle_handle.normal\naffordance_xyz = middle_handle.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the front right corner of the table"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm above the green cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_cylinder = parse_query_obj('green cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_cylinder.aabb\ncenter_x, center_y, center_z = green_cylinder.position\nx = center_x\ny = center_y\nz = max_z + cm2index(15, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 8cm away from the yellow box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_box = parse_query_obj('yellow box')\nmoving_dir = yellow_box.normal\naffordance_xyz = yellow_box.position + cm2index(8, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 4cm to the right of and 10cm on top of the blue cylinder"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_cylinder = parse_query_obj('blue cylinder')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_cylinder.aabb\ncenter_x, center_y, center_z = blue_cylinder.position\nx = center_x\ny = min_y + cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 25cm in front of [60, 70, 80]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 60 + cm2index(25, 'x')\ny = 70\nz = 80\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the left side of the green box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_box = parse_query_obj('green box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_box.aabb\ncenter_x, center_y, center_z = green_box.position\nx = center_x\ny = min_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm to the left of the red circle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nred_circle = parse_query_obj('red circle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = red_circle.aabb\ncenter_x, center_y, center_z = red_circle.position\nx = center_x\ny = min_y - cm2index(12, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 18cm above and 3cm to the left of the yellow box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nyellow_box = parse_query_obj('yellow box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_box.aabb\ncenter_x, center_y, center_z = yellow_box.position\nx = center_x\ny = min_y - cm2index(3, 'y')\nz = max_z + cm2index(18, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 15cm away from the orange container"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\norangef_container = parse_query_obj('orange container')\nmoving_dir = orange_container.normal\naffordance_xyz = orange_container.position + cm2index(15, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 10cm to the left of [70, 80, 90]"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nx = 70\ny = 80 - cm2index(10, 'y')\nz = 90\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point on the back side of the blue circle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_circle.aabb\ncenter_x, center_y, center_z = blue_circle.position\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 12cm on top of the green box"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ngreen_box = parse_query_obj('green box')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = green_box.aabb\ncenter_x, center_y, center_z = green_box.position\nx = center_x\ny = center_y\nz = max_z + cm2index(12, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 5cm to the right of the purple bottle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\npurple_bottle = parse_query_obj('purple bottle')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = purple_bottle.aabb\ncenter_x, center_y, center_z = purple_bottle.position\nx = center_x\ny = min_y + cm2index(5, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index\n\n# Query: a point 10cm in front of [10, 15, 60].\naffordance_map = get_empty_affordance_map()\n# 10cm in front of so we add to x-axis\nx = 10 + cm2index(10, 'x')\ny = 15\nz = 60\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the right side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# right side so y = max_y\nx = center_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm on top of the container.\naffordance_map = get_empty_affordance_map()\ncontainer = parse_query_obj('container')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = container.aabb\ncenter_x, center_y, center_z = container.position\n# 20cm on top of so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(20, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 1cm to the left of the brown block.\naffordance_map = get_empty_affordance_map()\nbrown_block = parse_query_obj('brown block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = brown_block.aabb\ncenter_x, center_y, center_z = brown_block.position\n# 1cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(1, 'y')\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: anywhere within 20cm of the right most block.\naffordance_map = get_empty_affordance_map()\nright_most_block = parse_query_obj('the right most block')\nset_voxel_by_radius(affordance_map, right_most_block.position, radius_cm=20, value=1)\n\n# Query: a point on the back side of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back side so x = min_x\nx = min_x\ny = center_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point on the front right corner of the table.\naffordance_map = get_empty_affordance_map()\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# front right corner so x = max_x and y = max_y\nx = max_x\ny = max_y\nz = center_z\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 30cm into the topmost drawer handle.\naffordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\n# negative normal because we are moving into the handle.\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(30, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 5cm above the blue block.\naffordance_map = get_empty_affordance_map()\nblue_block = parse_query_obj('blue block')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = blue_block.aabb\ncenter_x, center_y, center_z = blue_block.position\n# 5cm above so we add to z-axis\nx = center_x\ny = center_y\nz = max_z + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 20cm away from the leftmost block.\naffordance_map = get_empty_affordance_map()\nleftmost_block = parse_query_obj('leftmost block')\n# positive normal because we are moving away from the block.\nmoving_dir = leftmost_block.normal\naffordance_xyz = leftmost_block.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map\n\n# Query: a point 4cm to the left of and 10cm on top of the tray that contains the lemon.\naffordance_map = get_empty_affordance_map()\ntray_with_lemon = parse_query_obj('tray that contains the lemon')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = tray_with_lemon.aabb\ncenter_x, center_y, center_z = tray_with_lemon.position\n# 4cm to the left of so we subtract from y-axis, and 10cm on top of so we add to z-axis\nx = center_x\ny = min_y - cm2index(4, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm to the right of [45 49 66], and 5cm above it.\naffordance_map = get_empty_affordance_map()\n# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis\nx = 45\ny = 49 + cm2index(10, 'y')\nz = 66 + cm2index(5, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\naffordance_map = blue_circle.occupancy_map\nret_val = affordance_map\n\n# Query: a point at the center of the blue circle.\naffordance_map = get_empty_affordance_map()\nblue_circle = parse_query_obj('blue circle')\nx, y, z = blue_block.position\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n# Query: a point 10cm above and 5cm to the left of the yellow bowl.\naffordance_map = get_empty_affordance_map()\nyellow_bowl = parse_query_obj('yellow bowl')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = yellow_bowl.aabb\ncenter_x, center_y, center_z = yellow_bowl.position\n# 10cm above so we add to z-axis, and 5cm to the left of so we subtract from y-axis\nx = center_x\ny = min_y - cm2index(5, 'y')\nz = max_z + cm2index(10, 'z')\naffordance_map[x, y, z] = 1\nret_val = affordance_map\n\n```\n"}, {"role": "user", "content": "a point 20cm into the topmost drawer handle"}, {"role": "assistant", "content": "affordance_map = get_empty_affordance_map()\ntop_handle = parse_query_obj('topmost drawer handle')\nmoving_dir = -top_handle.normal\naffordance_xyz = top_handle.position + cm2index(20, moving_dir)\naffordance_map[affordance_xyz[0], affordance_xyz[1], affordance_xyz[2]] = 1\nret_val = affordance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the red cup"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nred_cup = parse_query_obj('red cup')\nset_voxel_by_radius(avoidance_map, red_cup.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the black square"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nblack_square = parse_query_obj('black square')\nset_voxel_by_radius(avoidance_map, black_square.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the big book"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nbig_book = parse_query_obj('big book')\nset_voxel_by_radius(avoidance_map, big_book.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the laptop"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nlaptop = parse_query_obj('laptop')\nset_voxel_by_radius(avoidance_map, laptop.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from the yellow ball"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nyellow_ball = parse_query_obj('yellow ball')\nset_voxel_by_radius(avoidance_map, yellow_ball.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm near the chair"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nchair = parse_query_obj('chair')\nset_voxel_by_radius(avoidance_map, chair.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm from anything electronic"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nelectronic_objects = parse_query_obj('anything electronic')\nfor obj in electronic_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm around the vase"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nvase = parse_query_obj('vase')\nset_voxel_by_radius(avoidance_map, vase.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the white box"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nwhite_box = parse_query_obj('white box')\nset_voxel_by_radius(avoidance_map, white_box.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm from anything breakable"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nbreakable_objects = parse_query_obj('anything breakable')\nfor obj in breakable_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm near the flower pot"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nflower_pot = parse_query_obj('flower pot')\nset_voxel_by_radius(avoidance_map, flower_pot.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm from the remote control"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nremote_control = parse_query_obj('remote control')\nset_voxel_by_radius(avoidance_map, remote_control.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm around the bookshelf"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nbookshelf = parse_query_obj('bookshelf')\nset_voxel_by_radius(avoidance_map, bookshelf.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the green toy"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ngreen_toy = parse_query_obj('green toy')\nset_voxel_by_radius(avoidance_map, green_toy.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm near the stove"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nstove = parse_query_obj('stove')\nset_voxel_by_radius(avoidance_map, stove.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from anything made of glass"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nglass_objects = parse_query_obj('anything made of glass')\nfor obj in glass_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the coffee table"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ncoffee_table = parse_query_obj('coffee table')\nset_voxel_by_radius(avoidance_map, coffee_table.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm from the orange"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\norange = parse_query_obj('orange')\nset_voxel_by_radius(avoidance_map, orange.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm from the picture frame"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\npicture_frame = parse_query_obj('picture frame')\nset_voxel_by_radius(avoidance_map, picture_frame.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm near the printer"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nprinter = parse_query_obj('printer')\nset_voxel_by_radius(avoidance_map, printer.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from anything electronic on the table"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nelectronic_objects_on_table = parse_query_obj('anything electronic on the table')\nfor obj in electronic_objects_on_table:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the refrigerator"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nrefrigerator = parse_query_obj('refrigerator')\nset_voxel_by_radius(avoidance_map, refrigerator.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the blue vase"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nblue_vase = parse_query_obj('blue vase')\nset_voxel_by_radius(avoidance_map, blue_vase.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the red pencil"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nred_pencil = parse_query_obj('red pencil')\nset_voxel_by_radius(avoidance_map, red_pencil.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm from the TV"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nTV = parse_query_obj('TV')\nset_voxel_by_radius(avoidance_map, TV.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from anything made of wood"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nwood_objects = parse_query_obj('anything made of wood')\nfor obj in wood_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm near the desk lamp"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ndesk_lamp = parse_query_obj('desk lamp')\nset_voxel_by_radius(avoidance_map, desk_lamp.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the bookcase"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nbookcase = parse_query_obj('bookcase')\nset_voxel_by_radius(avoidance_map, bookcase.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the yellow folder"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nyellow_folder = parse_query_obj('yellow folder')\nset_voxel_by_radius(avoidance_map, yellow_folder.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the toaster"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ntoaster = parse_query_obj('toaster')\nset_voxel_by_radius(avoidance_map, toaster.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm from anything made of metal"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nmetal_objects = parse_query_obj('anything made of metal')\nfor obj in metal_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the clock"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nclock = parse_query_obj('clock')\nset_voxel_by_radius(avoidance_map, clock.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm near the coffee machine"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ncoffee_machine = parse_query_obj('coffee machine')\nset_voxel_by_radius(avoidance_map, coffee_machine.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the couch"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ncouch = parse_query_obj('couch')\nset_voxel_by_radius(avoidance_map, couch.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the blue book"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nblue_book = parse_query_obj('blue book')\nset_voxel_by_radius(avoidance_map, blue_book.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the green plant"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ngreen_plant = parse_query_obj('green plant')\nset_voxel_by_radius(avoidance_map, green_plant.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from anything small"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nsmall_objects = parse_query_obj('anything small')\nfor obj in small_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the door"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ndoor = parse_query_obj('door')\nset_voxel_by_radius(avoidance_map, door.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the white paper"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nwhite_paper = parse_query_obj('white paper')\nset_voxel_by_radius(avoidance_map, white_paper.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm near the fan"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nfan = parse_query_obj('fan')\nset_voxel_by_radius(avoidance_map, fan.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from anything on the floor"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nfloor_objects = parse_query_obj('anything on the floor')\nfor obj in floor_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the radio"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nradio = parse_query_obj('radio')\nset_voxel_by_radius(avoidance_map, radio.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from the computer"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ncomputer = parse_query_obj('computer')\nset_voxel_by_radius(avoidance_map, computer.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the wall"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nwall = parse_query_obj('wall')\nset_voxel_by_radius(avoidance_map, wall.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the picture"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\npicture = parse_query_obj('picture')\nset_voxel_by_radius(avoidance_map, picture.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the keyboard"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nkeyboard = parse_query_obj('keyboard')\nset_voxel_by_radius(avoidance_map, keyboard.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm from anything made of fabric"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nfabric_objects = parse_query_obj('anything made of fabric')\nfor obj in fabric_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the vase on the table"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nvase_on_table = parse_query_obj('vase on the table')\nset_voxel_by_radius(avoidance_map, vase_on_table.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm near the window"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nwindow = parse_query_obj('window')\nset_voxel_by_radius(avoidance_map, window.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the shelf"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nshelf = parse_query_obj('shelf')\nset_voxel_by_radius(avoidance_map, shelf.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from the remote control on the couch"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nremote_control_on_couch = parse_query_obj('remote control on the couch')\nset_voxel_by_radius(avoidance_map, remote_control_on_couch.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the coffee mug"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ncoffee_mug = parse_query_obj('coffee mug')\nset_voxel_by_radius(avoidance_map, coffee_mug.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "20cm from anything rectangular"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nrectangular_objects = parse_query_obj('anything rectangular')\nfor obj in rectangular_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=20, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "30cm around the garbage can"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\ngarbage_can = parse_query_obj('garbage can')\nset_voxel_by_radius(avoidance_map, garbage_can.position, radius_cm=30, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "10cm from the book on the shelf"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nbook_on_shelf = parse_query_obj('book on the shelf')\nset_voxel_by_radius(avoidance_map, book_on_shelf.position, radius_cm=10, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "25cm near the chair leg"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nchair_leg = parse_query_obj('chair leg')\nset_voxel_by_radius(avoidance_map, chair_leg.position, radius_cm=25, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "15cm from anything made of paper"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\npaper_objects = parse_query_obj('anything made of paper')\nfor obj in paper_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=15, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_avoidance_map, set_voxel_by_radius, cm2index\n\n# Query: 10cm from the bowl.\navoidance_map = get_empty_avoidance_map()\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 20cm near the mug.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nret_val = avoidance_map\n\n# Query: 20cm around the mug and 10cm around the bowl.\navoidance_map = get_empty_avoidance_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(avoidance_map, mug.position, radius_cm=20, value=1)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(avoidance_map, bowl.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from anything fragile.\navoidance_map = get_empty_avoidance_map()\nfragile_objects = parse_query_obj('anything fragile')\nfor obj in fragile_objects:\n    set_voxel_by_radius(avoidance_map, obj.position, radius_cm=10, value=1)\nret_val = avoidance_map\n\n# Query: 10cm from the blue circle.\navoidance_map = get_empty_avoidance_map()\nblue_circle = parse_query_obj('blue circle')\nset_voxel_by_radius(avoidance_map, blue_circle.position, radius_cm=10, value=1)\nret_val = avoidance_map\n```\n"}, {"role": "user", "content": "5cm near the flower"}, {"role": "assistant", "content": "avoidance_map = get_empty_avoidance_map()\nflower = parse_query_obj('flower')\nset_voxel_by_radius(avoidance_map, flower.position, radius_cm=5, value=1)\nret_val = avoidance_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 2cm around the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, blue_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when on the front right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are 3cm above the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, center_z + cm2index(3, 'z'):] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the red block and 2cm around the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, red_block.position, radius_cm=1, value=0)\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, yellow_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front left corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm below the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, :center_z - cm2index(2, 'z')] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the right half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, center_y:, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm above the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0], yellow_block.position[1], yellow_block.position[2] + cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0], blue_block.position[1], blue_block.position[2] + blue_block.size[2]/2), radius_cm=blue_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when on the back right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 1cm below the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, (red_block.position[0], red_block.position[1], red_block.position[2] - cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the back half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:center_x, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the left of the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0] - cm2index(2, 'x'), green_block.position[1], green_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are 3cm above the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, center_z + cm2index(3, 'z'):] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the blue block and 2cm around the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, blue_block.position, radius_cm=1, value=0)\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, yellow_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm below the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, :center_z - cm2index(2, 'z')] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the left half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :center_y, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm to the right of the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, (red_block.position[0] + cm2index(1, 'x'), red_block.position[1], red_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0], green_block.position[1], green_block.position[2] + green_block.size[2]/2), radius_cm=green_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when on the back left corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 1cm above the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0], blue_block.position[1], blue_block.position[2] + cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the front half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[max_x:, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the front of the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0] + cm2index(2, 'x'), yellow_block.position[1], yellow_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are 3cm below the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, :center_z - cm2index(3, 'z')] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the red block and 2cm around the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, red_block.position, radius_cm=1, value=0)\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, yellow_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm above the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, center_z + cm2index(2, 'z'):] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the back half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:center_x, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm to the left of the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0] - cm2index(1, 'x'), green_block.position[1], green_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0], blue_block.position[1], blue_block.position[2] + blue_block.size[2]/2), radius_cm=blue_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the right of the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0] + cm2index(2, 'x'), yellow_block.position[1], yellow_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are on the back side of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the green block and 2cm around the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, blue_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front left corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm below the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0], yellow_block.position[1], yellow_block.position[2] - cm2index(2, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the left half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :center_y, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm above the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0], green_block.position[1], green_block.position[2] + cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, (red_block.position[0], red_block.position[1], red_block.position[2] + red_block.size[2]/2), radius_cm=red_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when on the back right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 1cm below the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0], blue_block.position[1], blue_block.position[2] - cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the front half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[max_x:, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the front of the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0] + cm2index(2, 'x'), green_block.position[1], green_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are 3cm above the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, center_z + cm2index(3, 'z'):] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the yellow block and 2cm around the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, yellow_block.position, radius_cm=1, value=0)\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm below the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, :center_z - cm2index(2, 'z')] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the right half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, center_y:, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm to the right of the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0] + cm2index(1, 'x'), blue_block.position[1], blue_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0], yellow_block.position[1], yellow_block.position[2] + yellow_block.size[2]/2), radius_cm=yellow_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when on the back left corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 1cm above the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, (red_block.position[0], red_block.position[1], red_block.position[2] + cm2index(1, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the back half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:center_x, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the left of the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0] - cm2index(2, 'x'), yellow_block.position[1], yellow_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are 3cm below the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, :center_z - cm2index(3, 'z')] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the green block and 2cm around the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, red_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front left corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm above the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :, center_z + cm2index(2, 'z'):] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the front half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[max_x:, :, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 1cm to the left of the blue block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, (blue_block.position[0] - cm2index(1, 'x'), blue_block.position[1], blue_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always open except when you are on the top surface of the green block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, (green_block.position[0], green_block.position[1], green_block.position[2] + green_block.size[2]/2), radius_cm=green_block.size[0]/2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are 2cm to the right of the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0] + cm2index(2, 'x'), yellow_block.position[1], yellow_block.position[2]), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are on the back side of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except 1cm around the blue block and 2cm around the red block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\nblue_block = parse_query_obj('blue block')\nset_voxel_by_radius(gripper_map, blue_block.position, radius_cm=1, value=0)\nred_block = parse_query_obj('red block')\nset_voxel_by_radius(gripper_map, red_block.position, radius_cm=2, value=0)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "close everywhere but open when you are on the front right corner of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\nx = max_x\ny = max_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "always close except when you are 2cm below the yellow block."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 0\nyellow_block = parse_query_obj('yellow block')\nset_voxel_by_radius(gripper_map, (yellow_block.position[0], yellow_block.position[1], yellow_block.position[2] - cm2index(2, 'z')), radius_cm=1, value=1)\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import parse_query_obj\nfrom plan_utils import get_empty_gripper_map, set_voxel_by_radius, cm2index\n\n# Query: open everywhere except 1cm around the green block.\ngripper_map = get_empty_gripper_map()\n# open everywhere\ngripper_map[:, :, :] = 1\n# close when 1cm around the green block\ngreen_block = parse_query_obj('green block')\nset_voxel_by_radius(gripper_map, green_block.position, radius_cm=1, value=0)\nret_val = gripper_map\n\n# Query: close everywhere but open when on top of the back left corner of the table.\ngripper_map = get_empty_gripper_map()\n# close everywhere\ngripper_map[:, :, :] = 0\n# open when on top of the back left corner of the table\ntable = parse_query_obj('table')\n(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb\ncenter_x, center_y, center_z = table.position\n# back so x = min_x, left so y = min_y, top so we add to z\nx = min_x\ny = min_y\nz = max_z + cm2index(15, 'z')\nset_voxel_by_radius(gripper_map, (x, y, z), radius_cm=10, value=1)\nret_val = gripper_map\n\n# Query: always open except when you are on the right side of the table.\ngripper_map = get_empty_gripper_map()\n# always open\ngripper_map[:, :, :] = 1\n# close when you are on the right side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# right side so y is greater than center_y\ngripper_map[:, center_y:, :] = 0\n\n# Query: always close except when you are on the back side of the table.\ngripper_map = get_empty_gripper_map()\n# always close\ngripper_map[:, :, :] = 0\n# open when you are on the back side of the table\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# back side so x is less than center_x\ngripper_map[:center_x, :, :] = 1\nret_val = gripper_map\n```\n"}, {"role": "user", "content": "open everywhere except on the left half of the table."}, {"role": "assistant", "content": "gripper_map = get_empty_gripper_map()\ngripper_map[:, :, :] = 1\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\ngripper_map[:, :center_y, :] = 0\nret_val = gripper_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the support surface of the mug"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nmug = parse_query_obj('mug')\ntarget_rotation = vec2quat(-mug.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 90 degrees when at the center of the red block"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nred_block = parse_query_obj('red block')\n(x, y, z) = red_block.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -np.pi / 2)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the table when within 20cm from table edge"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_edge = table.position + table.extent\nradius_cm = 20\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_edge, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 30 degrees slanted relative to the book"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nbook = parse_query_obj('book')\nface_book_quat = vec2quat(-book.normal)\n# rotate 30 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 6, 0, 0)\ntarget_rotation = qmult(face_book_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the front of the green vase"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ngreen_vase = parse_query_obj('green vase')\ntarget_rotation = vec2quat(-green_vase.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 15 degrees when at the center of the soccer ball"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nsoccer_ball = parse_query_obj('soccer ball')\n(x, y, z) = soccer_ball.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 12)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the coffee cup when within 25cm from coffee cup"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncoffee_cup = parse_query_obj('coffee cup')\ncoffee_cup_position = coffee_cup.position\nradius_cm = 25\ntarget_rotation = vec2quat(-coffee_cup.normal)\nset_voxel_by_radius(rotation_map, coffee_cup_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 60 degrees slanted relative to the laptop"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nlaptop = parse_query_obj('laptop')\nface_laptop_quat = vec2quat(-laptop.normal)\n# rotate 60 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 3, 0, 0)\ntarget_rotation = qmult(face_laptop_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the back of the chair"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nchair = parse_query_obj('chair')\ntarget_rotation = vec2quat(-chair.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 60 degrees when at the center of the basketball"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nbasketball = parse_query_obj('basketball')\n(x, y, z) = basketball.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -np.pi / 3)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the keyboard when within 30cm from keyboard"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nkeyboard = parse_query_obj('keyboard')\nkeyboard_position = keyboard.position\nradius_cm = 30\ntarget_rotation = vec2quat(-keyboard.normal)\nset_voxel_by_radius(rotation_map, keyboard_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 15 degrees slanted relative to the folder"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nfolder = parse_query_obj('folder')\nface_folder_quat = vec2quat(-folder.normal)\n# rotate 15 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 12, 0, 0)\ntarget_rotation = qmult(face_folder_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the window when within 20cm from window"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nwindow = parse_query_obj('window')\nwindow_position = window.position\nradius_cm = 20\ntarget_rotation = vec2quat(-window.normal)\nset_voxel_by_radius(rotation_map, window_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 75 degrees when at the center of the plate"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\n(x, y, z) = plate.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, 5 * np.pi / 12)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the shadow of the vase"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nvase = parse_query_obj('vase')\nshadow_position = vase.position + vase.extent\nradius_cm = 20\ntarget_rotation = vec2quat(-vase.normal)\nset_voxel_by_radius(rotation_map, shadow_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 85 degrees slanted relative to the jar"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\njar = parse_query_obj('jar')\nface_jar_quat = vec2quat(-jar.normal)\n# rotate 85 degrees around the x-axis\nrotation_delta = euler2quat(-5 * np.pi / 12, 0, 0)\ntarget_rotation = qmult(face_jar_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the picture frame when within 25cm from picture frame"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\npicture_frame = parse_query_obj('picture frame')\npicture_frame_position = picture_frame.position\nradius_cm = 25\ntarget_rotation = vec2quat(-picture_frame.normal)\nset_voxel_by_radius(rotation_map, picture_frame_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 40 degrees when at the center of the orange"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\norange = parse_query_obj('orange')\n(x, y, z) = orange.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -2 * np.pi / 5)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the lightswitch when within 10cm from lightswitch"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nlightswitch = parse_query_obj('lightswitch')\nlightswitch_position = lightswitch.position\nradius_cm = 10\ntarget_rotation = vec2quat(-lightswitch.normal)\nset_voxel_by_radius(rotation_map, lightswitch_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 25 degrees slanted relative to the glass"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nglass = parse_query_obj('glass')\nface_glass_quat = vec2quat(-glass.normal)\n# rotate 25 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_glass_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the cabinet when within 30cm from cabinet"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncabinet = parse_query_obj('cabinet')\ncabinet_position = cabinet.position\nradius_cm = 30\ntarget_rotation = vec2quat(-cabinet.normal)\nset_voxel_by_radius(rotation_map, cabinet_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 50 degrees when at the center of the speaker"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nspeaker = parse_query_obj('speaker')\n(x, y, z) = speaker.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, 5 * np.pi / 12)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the edge of the table when within 10cm from table edge"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_edge = table.position + table.extent\nradius_cm = 10\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_edge, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 35 degrees slanted relative to the bookshelf"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nbookshelf = parse_query_obj('bookshelf')\nface_bookshelf_quat = vec2quat(-bookshelf.normal)\n# rotate 35 degrees around the x-axis\nrotation_delta = euler2quat(-7 * np.pi / 20, 0, 0)\ntarget_rotation = qmult(face_bookshelf_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the cupboard when within 20cm from cupboard"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncupboard = parse_query_obj('cupboard')\ncupboard_position = cupboard.position\nradius_cm = 20\ntarget_rotation = vec2quat(-cupboard.normal)\nset_voxel_by_radius(rotation_map, cupboard_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 70 degrees when at the center of the apple"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\napple = parse_query_obj('apple')\n(x, y, z) = apple.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -7 * np.pi / 12)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the curtain when within 30cm from curtain"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncurtain = parse_query_obj('curtain')\ncurtain_position = curtain.position\nradius_cm = 30\ntarget_rotation = vec2quat(-curtain.normal)\nset_voxel_by_radius(rotation_map, curtain_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 10 degrees slanted relative to the desk"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ndesk = parse_query_obj('desk')\nface_desk_quat = vec2quat(-desk.normal)\n# rotate 10 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 18, 0, 0)\ntarget_rotation = qmult(face_desk_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the shelf when within 25cm from shelf"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nshelf = parse_query_obj('shelf')\nshelf_position = shelf.position\nradius_cm = 25\ntarget_rotation = vec2quat(-shelf.normal)\nset_voxel_by_radius(rotation_map, shelf_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 65 degrees when at the center of the monitor"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nmonitor = parse_query_obj('monitor')\n(x, y, z) = monitor.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, 13 * np.pi / 20)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the door when within 20cm from door"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ndoor = parse_query_obj('door')\ndoor_position = door.position\nradius_cm = 20\ntarget_rotation = vec2quat(-door.normal)\nset_voxel_by_radius(rotation_map, door_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 50 degrees slanted relative to the sink"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nsink = parse_query_obj('sink')\nface_sink_quat = vec2quat(-sink.normal)\n# rotate 50 degrees around the x-axis\nrotation_delta = euler2quat(-5 * np.pi / 12, 0, 0)\ntarget_rotation = qmult(face_sink_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the lamp when within 25cm from lamp"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nlamp = parse_query_obj('lamp')\nlamp_position = lamp.position\nradius_cm = 25\ntarget_rotation = vec2quat(-lamp.normal)\nset_voxel_by_radius(rotation_map, lamp_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 55 degrees when at the center of the printer"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nprinter = parse_query_obj('printer')\n(x, y, z) = printer.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -11 * np.pi / 20)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the wall when within 10cm from wall"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nwall = parse_query_obj('wall')\nwall_position = wall.position\nradius_cm = 10\ntarget_rotation = vec2quat(-wall.normal)\nset_voxel_by_radius(rotation_map, wall_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 75 degrees slanted relative to the chair"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nchair = parse_query_obj('chair')\nface_chair_quat = vec2quat(-chair.normal)\n# rotate 75 degrees around the x-axis\nrotation_delta = euler2quat(-15 * np.pi / 20, 0, 0)\ntarget_rotation = qmult(face_chair_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the telephone when within 15cm from telephone"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ntelephone = parse_query_obj('telephone')\ntelephone_position = telephone.position\nradius_cm = 15\ntarget_rotation = vec2quat(-telephone.normal)\nset_voxel_by_radius(rotation_map, telephone_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 30 degrees when at the center of the calendar"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncalendar = parse_query_obj('calendar')\n(x, y, z) = calendar.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 6)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the flower pot when within 10cm from flower pot"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nflower_pot = parse_query_obj('flower pot')\nflower_pot_position = flower_pot.position\nradius_cm = 10\ntarget_rotation = vec2quat(-flower_pot.normal)\nset_voxel_by_radius(rotation_map, flower_pot_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 40 degrees slanted relative to the clock"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nclock = parse_query_obj('clock')\nface_clock_quat = vec2quat(-clock.normal)\n# rotate 40 degrees around the x-axis\nrotation_delta = euler2quat(-2 * np.pi / 5, 0, 0)\ntarget_rotation = qmult(face_clock_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the sink when within 20cm from sink"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nsink = parse_query_obj('sink')\nsink_position = sink.position\nradius_cm = 20\ntarget_rotation = vec2quat(-sink.normal)\nset_voxel_by_radius(rotation_map, sink_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn counter-clockwise by 80 degrees when at the center of the vase"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nvase = parse_query_obj('vase')\n(x, y, z) = vase.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, -4 * np.pi / 5)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the shelf when within 15cm from shelf"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nshelf = parse_query_obj('shelf')\nshelf_position = shelf.position\nradius_cm = 15\ntarget_rotation = vec2quat(-shelf.normal)\nset_voxel_by_radius(rotation_map, shelf_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 20 degrees slanted relative to the table"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\nface_table_quat = vec2quat(-table.normal)\n# rotate 20 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 9, 0, 0)\ntarget_rotation = qmult(face_table_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the door handle when within 10cm from door handle"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ndoor_handle = parse_query_obj('door handle')\ndoor_handle_position = door_handle.position\nradius_cm = 10\ntarget_rotation = vec2quat(-door_handle.normal)\nset_voxel_by_radius(rotation_map, door_handle_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "turn clockwise by 10 degrees when at the center of the book"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nbook = parse_query_obj('book')\n(x, y, z) = book.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 18)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the refrigerator when within 20cm from refrigerator"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nrefrigerator = parse_query_obj('refrigerator')\nrefrigerator_position = refrigerator.position\nradius_cm = 20\ntarget_rotation = vec2quat(-refrigerator.normal)\nset_voxel_by_radius(rotation_map, refrigerator_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "rotate the gripper to be 65 degrees slanted relative to the lamp"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\nlamp = parse_query_obj('lamp')\nface_lamp_quat = vec2quat(-lamp.normal)\n# rotate 65 degrees around the x-axis\nrotation_delta = euler2quat(-13 * np.pi / 20, 0, 0)\ntarget_rotation = qmult(face_lamp_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_rotation_map, set_voxel_by_radius, cm2index, vec2quat\nfrom perception_utils import parse_query_obj\nfrom transforms3d.euler import euler2quat, quat2euler\nfrom transforms3d.quaternions import qmult, qinverse\n\n# Query: face the support surface of the bowl.\nrotation_map = get_empty_rotation_map()\nbowl = parse_query_obj('bowl')\ntarget_rotation = vec2quat(-bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: face the table when within 30cm from table center.\nrotation_map = get_empty_rotation_map()\ntable = parse_query_obj('table')\ntable_center = table.position\ntarget_rotation = vec2quat(-table.normal)\nset_voxel_by_radius(rotation_map, table_center, radius_cm=30, value=target_rotation)\nret_val = rotation_map\n\n# Query: face the blue bowl.\nrotation_map = get_empty_rotation_map()\nblue_bowl = parse_query_obj('brown block')\ntarget_rotation = vec2quat(-blue_bowl.normal)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n\n# Query: turn clockwise by 45 degrees when at the center of the beer cap.\nrotation_map = get_empty_rotation_map()\nbeer_cap = parse_query_obj('beer cap')\n(x, y, z) = beer_cap.position\ncurr_rotation = rotation_map[x, y, z]\nrotation_delta = euler2quat(0, 0, np.pi / 4)\nrotation_map[x, y, z] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: turn counter-clockwise by 30 degrees.\nrotation_map = get_empty_rotation_map()\ncurr_rotation = rotation_map[0, 0, 0]\nrotation_delta = euler2quat(0, 0, -np.pi / 6)\nrotation_map[:, :, :] = qmult(curr_rotation, rotation_delta)\nret_val = rotation_map\n\n# Query: rotate the gripper to be 45 degrees slanted relative to the plate.\nrotation_map = get_empty_rotation_map()\nplate = parse_query_obj('plate')\nface_plate_quat = vec2quat(-plate.normal)\n# rotate 45 degrees around the x-axis\nrotation_delta = euler2quat(-np.pi / 4, 0, 0)\ntarget_rotation = qmult(face_plate_quat, rotation_delta)\nrotation_map[:, :, :] = target_rotation\nret_val = rotation_map\n```\n"}, {"role": "user", "content": "face the cup when within 10cm from cup"}, {"role": "assistant", "content": "rotation_map = get_empty_rotation_map()\ncup = parse_query_obj('cup')\ncup_position = cup.position\nradius_cm = 10\ntarget_rotation = vec2quat(-cup.normal)\nset_voxel_by_radius(rotation_map, cup_position, radius_cm=radius_cm, value=target_rotation)\nret_val = rotation_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Move slower on the upper half of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the blue block."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblue_block = parse_query_obj('blue_block')\nset_voxel_by_radius(velocity_map, blue_block.position, radius_cm=10, value=1.5)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Halve the speed when near the boundaries of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\nset_voxel_by_radius(velocity_map, table.position, radius_cm=5, value=0.5)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 20% when near the red cup."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nred_cup = parse_query_obj('red_cup')\nset_voxel_by_radius(velocity_map, red_cup.position, radius_cm=8, value=0.8)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nset_voxel_by_radius(velocity_map, (center_x, center_y, center_z), radius_cm=15, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when far from any objects."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nvelocity_map[:] = 1\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the lower half of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[:, center_y:, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Slow down near the boundary of the green plate."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngreen_plate = parse_query_obj('green_plate')\nset_voxel_by_radius(velocity_map, green_plate.position, radius_cm=7, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the wooden spoon."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwooden_spoon = parse_query_obj('wooden_spoon')\nset_voxel_by_radius(velocity_map, wooden_spoon.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 30% when near the white bowl."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwhite_bowl = parse_query_obj('white_bowl')\nset_voxel_by_radius(velocity_map, white_bowl.position, radius_cm=12, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up near the edge of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\nset_voxel_by_radius(velocity_map, table.position, radius_cm=3, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the black vase."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblack_vase = parse_query_obj('black_vase')\nset_voxel_by_radius(velocity_map, black_vase.position, radius_cm=8, value=0.8)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when away from the table boundaries."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nvelocity_map[:] = 1\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the orange book."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\norange_book = parse_query_obj('orange_book')\nset_voxel_by_radius(velocity_map, orange_book.position, radius_cm=10, value=1.3)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the grey box."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngrey_box = parse_query_obj('grey_box')\nset_voxel_by_radius(velocity_map, grey_box.position, radius_cm=12, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when on the upper-right quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[center_x:, center_y:, :] = 1.1\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the stainless steel fork."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nstainless_steel_fork = parse_query_obj('stainless_steel_fork')\nset_voxel_by_radius(velocity_map, stainless_steel_fork.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 25% when near the transparent cup."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntransparent_cup = parse_query_obj('transparent_cup')\nset_voxel_by_radius(velocity_map, transparent_cup.position, radius_cm=10, value=0.75)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the edge of the blue plate."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblue_plate = parse_query_obj('blue_plate')\nset_voxel_by_radius(velocity_map, blue_plate.position, radius_cm=5, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the yellow bottle."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nyellow_bottle = parse_query_obj('yellow_bottle')\nset_voxel_by_radius(velocity_map, yellow_bottle.position, radius_cm=8, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when near the silver spoon."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nsilver_spoon = parse_query_obj('silver_spoon')\nset_voxel_by_radius(velocity_map, silver_spoon.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the lower-left quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[:center_x, :center_y, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the brown box."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nbrown_box = parse_query_obj('brown_box')\nset_voxel_by_radius(velocity_map, brown_box.position, radius_cm=12, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the green plate."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngreen_plate = parse_query_obj('green_plate')\nset_voxel_by_radius(velocity_map, green_plate.position, radius_cm=10, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the pink cup."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\npink_cup = parse_query_obj('pink_cup')\nset_voxel_by_radius(velocity_map, pink_cup.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 20% when near the white book."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwhite_book = parse_query_obj('white_book')\nset_voxel_by_radius(velocity_map, white_book.position, radius_cm=10, value=0.8)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the edge of the wooden board."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwooden_board = parse_query_obj('wooden_board')\nset_voxel_by_radius(velocity_map, wooden_board.position, radius_cm=5, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the black mug."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblack_mug = parse_query_obj('black_mug')\nset_voxel_by_radius(velocity_map, black_mug.position, radius_cm=8, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when near the glass vase."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nglass_vase = parse_query_obj('glass_vase')\nset_voxel_by_radius(velocity_map, glass_vase.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the upper-left quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[:center_x, center_y:, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the metal fork."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nmetal_fork = parse_query_obj('metal_fork')\nset_voxel_by_radius(velocity_map, metal_fork.position, radius_cm=10, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the blue bowl."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblue_bowl = parse_query_obj('blue_bowl')\nset_voxel_by_radius(velocity_map, blue_bowl.position, radius_cm=10, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the wooden spoon."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwooden_spoon = parse_query_obj('wooden_spoon')\nset_voxel_by_radius(velocity_map, wooden_spoon.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 25% when near the white vase."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwhite_vase = parse_query_obj('white_vase')\nset_voxel_by_radius(velocity_map, white_vase.position, radius_cm=10, value=0.75)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the edge of the red plate."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nred_plate = parse_query_obj('red_plate')\nset_voxel_by_radius(velocity_map, red_plate.position, radius_cm=5, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the yellow bottle."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nyellow_bottle = parse_query_obj('yellow_bottle')\nset_voxel_by_radius(velocity_map, yellow_bottle.position, radius_cm=8, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when near the stainless steel knife."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nstainless_steel_knife = parse_query_obj('stainless_steel_knife')\nset_voxel_by_radius(velocity_map, stainless_steel_knife.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the lower-right quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[center_x:, :center_y, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the green box."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngreen_box = parse_query_obj('green_box')\nset_voxel_by_radius(velocity_map, green_box.position, radius_cm=12, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the yellow bowl."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nyellow_bowl = parse_query_obj('yellow_bowl')\nset_voxel_by_radius(velocity_map, yellow_bowl.position, radius_cm=10, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the silver knife."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nsilver_knife = parse_query_obj('silver_knife')\nset_voxel_by_radius(velocity_map, silver_knife.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 20% when near the black book."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblack_book = parse_query_obj('black_book')\nset_voxel_by_radius(velocity_map, black_book.position, radius_cm=10, value=0.8)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the edge of the grey plate."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngrey_plate = parse_query_obj('grey_plate')\nset_voxel_by_radius(velocity_map, grey_plate.position, radius_cm=5, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the pink bottle."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\npink_bottle = parse_query_obj('pink_bottle')\nset_voxel_by_radius(velocity_map, pink_bottle.position, radius_cm=8, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when near the wood board."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwood_board = parse_query_obj('wood_board')\nset_voxel_by_radius(velocity_map, wood_board.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the upper-right quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[center_x:, center_y:, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the metal spoon."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nmetal_spoon = parse_query_obj('metal_spoon')\nset_voxel_by_radius(velocity_map, metal_spoon.position, radius_cm=10, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the blue cup."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nblue_cup = parse_query_obj('blue_cup')\nset_voxel_by_radius(velocity_map, blue_cup.position, radius_cm=10, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed near the wood fork."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwood_fork = parse_query_obj('wood_fork')\nset_voxel_by_radius(velocity_map, wood_fork.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduce speed by 25% when near the white cup."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nwhite_cup = parse_query_obj('white_cup')\nset_voxel_by_radius(velocity_map, white_cup.position, radius_cm=10, value=0.75)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when near the edge of the red bowl."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nred_bowl = parse_query_obj('red_bowl')\nset_voxel_by_radius(velocity_map, red_bowl.position, radius_cm=5, value=1.2)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Decrease speed when near the yellow mug."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nyellow_mug = parse_query_obj('yellow_mug')\nset_voxel_by_radius(velocity_map, yellow_mug.position, radius_cm=8, value=0.7)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Maintain speed when near the stainless steel spoon."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nstainless_steel_spoon = parse_query_obj('stainless_steel_spoon')\nset_voxel_by_radius(velocity_map, stainless_steel_spoon.position, radius_cm=5, value=1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Increase speed when on the lower-left quarter of the table."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\nvelocity_map[:center_x, :center_y, :] = 1.2\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Reduced speed near the brown vase."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\nbrown_vase = parse_query_obj('brown_vase')\nset_voxel_by_radius(velocity_map, brown_vase.position, radius_cm=12, value=0.6)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom plan_utils import get_empty_velocity_map, set_voxel_by_radius, cm2index\nfrom perception_utils import parse_query_obj\n\n# Query: faster when on the right side of the table and slower when on the left side of the table.\nvelocity_map = get_empty_velocity_map()\ntable = parse_query_obj('table')\ncenter_x, center_y, center_z = table.position\n# faster on right side so 1.5 when y > center_y, slower on left side so 0.5 when y < center_y\nvelocity_map[:, center_y:, :] = 1.5\nvelocity_map[:, :center_y, :] = 0.5\nret_val = velocity_map\n\n# Query: slow down by a quarter.\nvelocity_map = get_empty_velocity_map()\nvelocity_map[:] = 0.75\nret_val = velocity_map\n\n# Query: slow down by a half when you're near anything fragile (objects: ['block', 'fork', 'mug', 'bowl', 'chips']).\nvelocity_map = get_empty_velocity_map()\nmug = parse_query_obj('mug')\nset_voxel_by_radius(velocity_map, mug.position, radius_cm=10, value=0.5)\nbowl = parse_query_obj('bowl')\nset_voxel_by_radius(velocity_map, bowl.position, radius_cm=10, value=0.5)\nret_val = velocity_map\n\n# Query: quarter of the speed when within 9cm from the yellow line.\nvelocity_map = get_empty_velocity_map()\nyellow_line = parse_query_obj('yellow_line')\nset_voxel_by_radius(velocity_map, yellow_line.position, radius_cm=9, value=0.25)\nret_val = velocity_map\n```\n"}, {"role": "user", "content": "Speed up when near the center of the green vase."}, {"role": "assistant", "content": "velocity_map = get_empty_velocity_map()\ngreen_vase = parse_query_obj('green_vase')\nset_voxel_by_radius(velocity_map, green_vase.position, radius_cm=10, value=1.1)\nret_val = velocity_map"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "smallest object"}, {"role": "assistant", "content": "objects = ['book', 'phone', 'wallet']\nsmallest_obj = None\nmin_size = float('inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < min_size:\n        smallest_obj = obj_detected\n        min_size = obj_detected.size\nret_val = smallest_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "tallest object"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'lamp']\ntallest_obj = None\nmax_height = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[2] > max_height:\n        tallest_obj = obj_detected\n        max_height = obj_detected.position[2]\nret_val = tallest_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object farthest from the gripper"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nfarthest_obj = None\nmax_distance = float('-inf')\ngripper = detect('gripper')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - gripper.position)\n    if distance > max_distance:\n        farthest_obj = obj_detected\n        max_distance = distance\nret_val = farthest_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object closest to the table edge"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nclosest_obj = None\nmin_distance = float('inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance < min_distance:\n        closest_obj = obj_detected\n        min_distance = distance\nret_val = closest_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all small objects"}, {"role": "assistant", "content": "objects = ['button', 'coin', 'ring']\nsmall_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10:\n        small_objects.append(obj_detected)\nret_val = small_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the largest area"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_largest_area = None\nmax_area = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.area > max_area:\n        obj_with_largest_area = obj_detected\n        max_area = obj_detected.area\nret_val = obj_with_largest_area"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "any object on the right side of the table"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\nobj_on_right_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0:\n        obj_on_right_side = obj_detected\n        break\nret_val = obj_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "blue objects"}, {"role": "assistant", "content": "objects = ['blue block', 'blue ball', 'blue pen']\nblue_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    blue_objects.append(obj_detected)\nret_val = blue_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heavy objects"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheavy_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.mass > 10:\n        heavy_objects.append(obj_detected)\nret_val = heavy_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not a block"}, {"role": "assistant", "content": "objects = ['block', 'vase', 'phone']\nnot_block_obj = None\nfor obj in objects:\n    if obj != 'block':\n        not_block_obj = detect(obj)\n        break\nret_val = not_block_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "objects in a row"}, {"role": "assistant", "content": "objects = ['block1', 'block2', 'block3']\nobjs_in_row = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[1] == objects[0].position[1]:\n        objs_in_row.append(obj_detected)\nret_val = objs_in_row"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object touching the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobj_touching_table = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[2] == 0:\n        obj_touching_table = obj_detected\n        break\nret_val = obj_touching_table"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "small round objects"}, {"role": "assistant", "content": "objects = ['marble', 'coin', 'button']\nsmall_round_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10 and obj_detected.shape == 'circle':\n        small_round_objects.append(obj_detected)\nret_val = small_round_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with a hole"}, {"role": "assistant", "content": "objects = ['donut', 'ring', 'hoola hoop']\nobj_with_hole = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.has_hole:\n        obj_with_hole = obj_detected\n        break\nret_val = obj_with_hole"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heaviest object"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheaviest_obj = None\nmax_mass = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.mass > max_mass:\n        heaviest_obj = obj_detected\n        max_mass = obj_detected.mass\nret_val = heaviest_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects on the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate', 'book', 'phone']\nobjs_on_table = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[2] == 0:\n        objs_on_table.append(obj_detected)\nret_val = objs_on_table"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not round"}, {"role": "assistant", "content": "objects = ['block', 'vase', 'phone']\nnot_round_obj = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.shape != 'circle':\n        not_round_obj = obj_detected\n        break\nret_val = not_round_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "tallest object on the right side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\ntallest_obj_on_right_side = None\nmax_height = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0 and obj_detected.position[2] > max_height:\n        tallest_obj_on_right_side = obj_detected\n        max_height = obj_detected.position[2]\nret_val = tallest_obj_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the largest volume"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_largest_volume = None\nmax_volume = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.volume > max_volume:\n        obj_with_largest_volume = obj_detected\n        max_volume = obj_detected.volume\nret_val = obj_with_largest_volume"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object closest to the center of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nclosest_obj_to_center = None\nmin_distance = float('inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance < min_distance:\n        closest_obj_to_center = obj_detected\n        min_distance = distance\nret_val = closest_obj_to_center"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects with a flat surface"}, {"role": "assistant", "content": "objects = ['plate', 'book', 'phone']\nobjs_with_flat_surface = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.has_flat_surface:\n        objs_with_flat_surface.append(obj_detected)\nret_val = objs_with_flat_surface"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not blue"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nnot_blue_obj = None\nfor obj in objects:\n    if obj != 'blue block':\n        not_blue_obj = detect(obj)\n        break\nret_val = not_blue_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object farthest from the edge of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nfarthest_obj_from_edge = None\nmax_distance = float('-inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance > max_distance:\n        farthest_obj_from_edge = obj_detected\n        max_distance = distance\nret_val = farthest_obj_from_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the smallest area"}, {"role": "assistant", "content": "objects = ['button', 'coin', 'ring']\nobj_with_smallest_area = None\nmin_area = float('inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.area < min_area:\n        obj_with_smallest_area = obj_detected\n        min_area = obj_detected.area\nret_val = obj_with_smallest_area"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects that are not blocks"}, {"role": "assistant", "content": "objects = ['block', 'vase', 'phone', 'cup', 'bowl', 'plate']\nobjs_not_blocks = []\nfor obj in objects:\n    if obj != 'block':\n        objs_not_blocks.append(detect(obj))\nret_val = objs_not_blocks"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heavy object on the left side"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheavy_obj_on_left_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0 and obj_detected.mass > 10:\n        heavy_obj_on_left_side = obj_detected\n        break\nret_val = heavy_obj_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object touching the edge of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobj_touching_edge = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if np.linalg.norm(obj_detected.position - detect('table').position) == 0:\n        obj_touching_edge = obj_detected\n        break\nret_val = obj_touching_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with a unique shape"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nobj_with_unique_shape = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.shape not in [o.shape for o in objects if o != obj]:\n        obj_with_unique_shape = obj_detected\n        break\nret_val = obj_with_unique_shape"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects on the right side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\nobjs_on_right_side = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0:\n        objs_on_right_side.append(obj_detected)\nret_val = objs_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the longest edge"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_longest_edge = None\nmax_edge_length = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.edge_length > max_edge_length:\n        obj_with_longest_edge = obj_detected\n        max_edge_length = obj_detected.edge_length\nret_val = obj_with_longest_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all small round objects"}, {"role": "assistant", "content": "objects = ['marble', 'coin', 'button']\nsmall_round_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10 and obj_detected.shape == 'circle':\n        small_round_objects.append(obj_detected)\nret_val = small_round_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not a cup"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nnot_cup_obj = None\nfor obj in objects:\n    if obj != 'cup':\n        not_cup_obj = detect(obj)\n        break\nret_val = not_cup_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object closest to the gripper"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nclosest_obj_to_gripper = None\nmin_distance = float('inf')\ngripper = detect('gripper')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - gripper.position)\n    if distance < min_distance:\n        closest_obj_to_gripper = obj_detected\n        min_distance = distance\nret_val = closest_obj_to_gripper"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects with a hole"}, {"role": "assistant", "content": "objects = ['donut', 'ring', 'hoola hoop']\nobjs_with_hole = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.has_hole:\n        objs_with_hole.append(obj_detected)\nret_val = objs_with_hole"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object farthest from the center of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nfarthest_obj_from_center = None\nmax_distance = float('-inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance > max_distance:\n        farthest_obj_from_center = obj_detected\n        max_distance = distance\nret_val = farthest_obj_from_center"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not heavy"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nnot_heavy_obj = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.mass <= 10:\n        not_heavy_obj = obj_detected\n        break\nret_val = not_heavy_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "tallest object on the left side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\ntallest_obj_on_left_side = None\nmax_height = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0 and obj_detected.position[2] > max_height:\n        tallest_obj_on_left_side = obj_detected\n        max_height = obj_detected.position[2]\nret_val = tallest_obj_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the smallest volume"}, {"role": "assistant", "content": "objects = ['button', 'coin', 'ring']\nobj_with_smallest_volume = None\nmin_volume = float('inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.volume < min_volume:\n        obj_with_smallest_volume = obj_detected\n        min_volume = obj_detected.volume\nret_val = obj_with_smallest_volume"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects that are not blocks"}, {"role": "assistant", "content": "objects = ['block', 'vase', 'phone', 'cup', 'bowl', 'plate']\nobjs_not_blocks = []\nfor obj in objects:\n    if obj != 'block':\n        objs_not_blocks.append(detect(obj))\nret_val = objs_not_blocks"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heavy object on the right side"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheavy_obj_on_right_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0 and obj_detected.mass > 10:\n        heavy_obj_on_right_side = obj_detected\n        break\nret_val = heavy_obj_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object touching the center of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobj_touching_center = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if np.linalg.norm(obj_detected.position - detect('table').position) == 0:\n        obj_touching_center = obj_detected\n        break\nret_val = obj_touching_center"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with a unique color"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nobj_with_unique_color = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.color not in [o.color for o in objects if o != obj]:\n        obj_with_unique_color = obj_detected\n        break\nret_val = obj_with_unique_color"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects on the left side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\nobjs_on_left_side = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0:\n        objs_on_left_side.append(obj_detected)\nret_val = objs_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the shortest edge"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_shortest_edge = None\nmin_edge_length = float('inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.edge_length < min_edge_length:\n        obj_with_shortest_edge = obj_detected\n        min_edge_length = obj_detected.edge_length\nret_val = obj_with_shortest_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all small round objects"}, {"role": "assistant", "content": "objects = ['marble', 'coin', 'button']\nsmall_round_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10 and obj_detected.shape == 'circle':\n        small_round_objects.append(obj_detected)\nret_val = small_round_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not a vase"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nnot_vase_obj = None\nfor obj in objects:\n    if obj != 'vase':\n        not_vase_obj = detect(obj)\n        break\nret_val = not_vase_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object closest to the edge of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nclosest_obj_to_edge = None\nmin_distance = float('inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance < min_distance:\n        closest_obj_to_edge = obj_detected\n        min_distance = distance\nret_val = closest_obj_to_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects with a flat surface"}, {"role": "assistant", "content": "objects = ['plate', 'book', 'phone']\nobjs_with_flat_surface = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.has_flat_surface:\n        objs_with_flat_surface.append(obj_detected)\nret_val = objs_with_flat_surface"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not blue"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nnot_blue_obj = None\nfor obj in objects:\n    if obj != 'blue block':\n        not_blue_obj = detect(obj)\n        break\nret_val = not_blue_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object farthest from the gripper"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nfarthest_obj_from_gripper = None\nmax_distance = float('-inf')\ngripper = detect('gripper')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - gripper.position)\n    if distance > max_distance:\n        farthest_obj_from_gripper = obj_detected\n        max_distance = distance\nret_val = farthest_obj_from_gripper"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the largest edge"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_largest_edge = None\nmax_edge_length = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.edge_length > max_edge_length:\n        obj_with_largest_edge = obj_detected\n        max_edge_length = obj_detected.edge_length\nret_val = obj_with_largest_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects that are not cups"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobjs_not_cups = []\nfor obj in objects:\n    if obj != 'cup':\n        objs_not_cups.append(detect(obj))\nret_val = objs_not_cups"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heavy object on the left side"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheavy_obj_on_left_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0 and obj_detected.mass > 10:\n        heavy_obj_on_left_side = obj_detected\n        break\nret_val = heavy_obj_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object touching the edge of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobj_touching_edge = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if np.linalg.norm(obj_detected.position - detect('table').position) == 0:\n        obj_touching_edge = obj_detected\n        break\nret_val = obj_touching_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with a unique shape"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nobj_with_unique_shape = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.shape not in [o.shape for o in objects if o != obj]:\n        obj_with_unique_shape = obj_detected\n        break\nret_val = obj_with_unique_shape"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects on the right side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\nobjs_on_right_side = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0:\n        objs_on_right_side.append(obj_detected)\nret_val = objs_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the longest edge"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_longest_edge = None\nmax_edge_length = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.edge_length > max_edge_length:\n        obj_with_longest_edge = obj_detected\n        max_edge_length = obj_detected.edge_length\nret_val = obj_with_longest_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "small object on the left side"}, {"role": "assistant", "content": "objects = ['button', 'coin', 'ring']\nsmall_obj_on_left_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0 and obj_detected.size < 10:\n        small_obj_on_left_side = obj_detected\n        break\nret_val = small_obj_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not a book"}, {"role": "assistant", "content": "objects = ['book', 'phone', 'vase']\nnot_book_obj = None\nfor obj in objects:\n    if obj != 'book':\n        not_book_obj = detect(obj)\n        break\nret_val = not_book_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all small round objects"}, {"role": "assistant", "content": "objects = ['marble', 'coin', 'button']\nsmall_round_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10 and obj_detected.shape == 'circle':\n        small_round_objects.append(obj_detected)\nret_val = small_round_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object closest to the center of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nclosest_obj_to_center = None\nmin_distance = float('inf')\ntable = detect('table')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - table.position)\n    if distance < min_distance:\n        closest_obj_to_center = obj_detected\n        min_distance = distance\nret_val = closest_obj_to_center"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects with a flat surface"}, {"role": "assistant", "content": "objects = ['plate', 'book', 'phone']\nobjs_with_flat_surface = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.has_flat_surface:\n        objs_with_flat_surface.append(obj_detected)\nret_val = objs_with_flat_surface"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not blue"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nnot_blue_obj = None\nfor obj in objects:\n    if obj != 'blue block':\n        not_blue_obj = detect(obj)\n        break\nret_val = not_blue_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object farthest from the gripper"}, {"role": "assistant", "content": "objects = ['blue block', 'red block', 'green block']\nfarthest_obj_from_gripper = None\nmax_distance = float('-inf')\ngripper = detect('gripper')\nfor obj in objects:\n    obj_detected = detect(obj)\n    distance = np.linalg.norm(obj_detected.position - gripper.position)\n    if distance > max_distance:\n        farthest_obj_from_gripper = obj_detected\n        max_distance = distance\nret_val = farthest_obj_from_gripper"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the largest volume"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_largest_volume = None\nmax_volume = float('-inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.volume > max_volume:\n        obj_with_largest_volume = obj_detected\n        max_volume = obj_detected.volume\nret_val = obj_with_largest_volume"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects that are not blocks"}, {"role": "assistant", "content": "objects = ['block', 'vase', 'phone', 'cup', 'bowl', 'plate']\nobjs_not_blocks = []\nfor obj in objects:\n    if obj != 'block':\n        objs_not_blocks.append(detect(obj))\nret_val = objs_not_blocks"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "heavy object on the right side"}, {"role": "assistant", "content": "objects = ['weight', 'bookend', 'metal block']\nheavy_obj_on_right_side = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] > 0 and obj_detected.mass > 10:\n        heavy_obj_on_right_side = obj_detected\n        break\nret_val = heavy_obj_on_right_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object touching the center of the table"}, {"role": "assistant", "content": "objects = ['cup', 'bowl', 'plate']\nobj_touching_center = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if np.linalg.norm(obj_detected.position - detect('table').position) == 0:\n        obj_touching_center = obj_detected\n        break\nret_val = obj_touching_center"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with a unique color"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nobj_with_unique_color = None\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.color not in [o.color for o in objects if o != obj]:\n        obj_with_unique_color = obj_detected\n        break\nret_val = obj_with_unique_color"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all objects on the left side"}, {"role": "assistant", "content": "objects = ['vase', 'candle', 'book']\nobjs_on_left_side = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.position[0] < 0:\n        objs_on_left_side.append(obj_detected)\nret_val = objs_on_left_side"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object with the shortest edge"}, {"role": "assistant", "content": "objects = ['book', 'magazine', 'newspaper']\nobj_with_shortest_edge = None\nmin_edge_length = float('inf')\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.edge_length < min_edge_length:\n        obj_with_shortest_edge = obj_detected\n        min_edge_length = obj_detected.edge_length\nret_val = obj_with_shortest_edge"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "all small round objects"}, {"role": "assistant", "content": "objects = ['marble', 'coin', 'button']\nsmall_round_objects = []\nfor obj in objects:\n    obj_detected = detect(obj)\n    if obj_detected.size < 10 and obj_detected.shape == 'circle':\n        small_round_objects.append(obj_detected)\nret_val = small_round_objects"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom perception_utils import detect\n\nobjects = ['green block', 'cardboard box']\n# Query: gripper.\ngripper = detect('gripper')\nret_val = gripper\n\nobjects = ['handle1', 'handle2', 'egg1', 'egg2', 'plate']\n# Query: topmost handle.\nhandle1 = detect('handle1')\nhandle2 = detect('handle2')\nif handle1.position[2] > handle2.position[2]:\n    top_handle = handle1\nelse:\n    top_handle = handle2\nret_val = top_handle\n\nobjects = ['vase', 'napkin box', 'mask']\n# Query: table.\ntable = detect('table')\nret_val = table\n\nobjects = ['brown line', 'red block', 'monitor']\n# Query: brown line.\nbrown_line = detect('brown line')\nret_val = brown_line\n\nobjects = ['green block', 'cup holder', 'black block']\n# Query: any block.\nblock = detect('green block')\nret_val = block\n\nobjects = ['mouse', 'yellow bowl', 'brown bowl', 'sticker']\n# Query: bowl closest to the sticker.\nyellow_bowl = detect('yellow bowl')\nbrown_bowl = detect('brown bowl')\nsticker = detect('sticker')\nif np.linalg.norm(yellow_bowl.position - sticker.position) < np.linalg.norm(brown_bowl.position - sticker.position):\n    closest_bowl = yellow_bowl\nelse:\n    closest_bowl = brown_bowl\nret_val = closest_bowl\n\nobjects = ['grape', 'wood tray', 'strawberry', 'white tray', 'blue tray', 'bread']\n# Query: tray that contains the bread.\nwood_tray = detect('wood tray')\nwhite_tray = detect('white tray')\nbread = detect('bread')\nif np.linalg.norm(wood_tray.position - bread.position) < np.linalg.norm(white_tray.position - bread.position):\n    tray_with_bread = wood_tray\nelse:\n    tray_with_bread = white_tray\nret_val = tray_with_bread\n\nobjects = ['glass', 'vase', 'plastic bottle', 'block', 'phone case']\n# Query: anything fragile.\nfragile_items = []\nfor obj in ['glass', 'vase']:\n    item = detect(obj)\n    fragile_items.append(item)\nret_val = fragile_items\n\nobjects = ['blue block', 'red block']\n# Query: green block.\nret_val = None\n```\nYou now have a global variable `velocity_map = get_empty_velocity_map()`"}, {"role": "user", "content": "object that is not a vase"}, {"role": "assistant", "content": "objects = ['vase', 'phone', 'book']\nnot_vase_obj = None\nfor obj in objects:\n    if obj != 'vase':\n        not_vase_obj = detect(obj)\n        break\nret_val = not_vase_obj"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the red book and place it on the table"}, {"role": "assistant", "content": "composer(\"grasp the red book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the left drawer"}, {"role": "assistant", "content": "composer(\"grasp the left drawer handle, at 0.5x speed\")\ncomposer(\"move away from the left drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the white coffee cup on the coffee table"}, {"role": "assistant", "content": "composer(\"grasp the white coffee cup\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the coffee table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the apple and put it in the fruit bowl"}, {"role": "assistant", "content": "composer(\"grasp the apple\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the fruit bowl\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the laptop"}, {"role": "assistant", "content": "composer(\"push close the laptop lid by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the pencil on the desk"}, {"role": "assistant", "content": "composer(\"grasp the pencil\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the desk\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "move the chair back to its original position"}, {"role": "assistant", "content": "composer(\"grasp the chair\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the original position of the chair\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the phone and place it on the phone holder"}, {"role": "assistant", "content": "composer(\"grasp the phone\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the phone holder\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the book on the bookshelf"}, {"role": "assistant", "content": "composer(\"grasp the book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the bookshelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the cabinet door"}, {"role": "assistant", "content": "composer(\"grasp the cabinet door handle, at 0.5x speed\")\ncomposer(\"move away from the cabinet door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the orange and place it in the fruit basket"}, {"role": "assistant", "content": "composer(\"grasp the orange\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the fruit basket\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the vase on the table"}, {"role": "assistant", "content": "composer(\"grasp the vase\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the toy car and put it in the toy box"}, {"role": "assistant", "content": "composer(\"grasp the toy car\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the toy box\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the window"}, {"role": "assistant", "content": "composer(\"push close the window by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the picture frame on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the picture frame\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the strawberry and put it in the fruit salad"}, {"role": "assistant", "content": "composer(\"grasp the strawberry\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the fruit salad\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the refrigerator door"}, {"role": "assistant", "content": "composer(\"grasp the refrigerator door handle, at 0.5x speed\")\ncomposer(\"move away from the refrigerator door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the plate on the table"}, {"role": "assistant", "content": "composer(\"grasp the plate\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the broom and sweep the floor"}, {"role": "assistant", "content": "composer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"sweep the floor\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the folder on the desk"}, {"role": "assistant", "content": "composer(\"grasp the folder\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the desk\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the microwave"}, {"role": "assistant", "content": "composer(\"grasp the microwave door handle, at 0.5x speed\")\ncomposer(\"move away from the microwave door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the candle and put it on the coffee table"}, {"role": "assistant", "content": "composer(\"grasp the candle\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the coffee table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the magazine on the rack"}, {"role": "assistant", "content": "composer(\"grasp the magazine\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the rack\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the basket and put it on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the basket\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the closet door"}, {"role": "assistant", "content": "composer(\"push close the closet door by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the toy on the toy box"}, {"role": "assistant", "content": "composer(\"grasp the toy\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the toy box\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the spoon and put it in the drawer"}, {"role": "assistant", "content": "composer(\"grasp the spoon\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the drawer\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the oven door"}, {"role": "assistant", "content": "composer(\"grasp the oven door handle, at 0.5x speed\")\ncomposer(\"move away from the oven door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the book on the nightstand"}, {"role": "assistant", "content": "composer(\"grasp the book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the nightstand\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the key and put it on the hook"}, {"role": "assistant", "content": "composer(\"grasp the key\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the hook\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the plate in the dishwasher"}, {"role": "assistant", "content": "composer(\"grasp the plate\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the dishwasher\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the flower vase and put it on the table"}, {"role": "assistant", "content": "composer(\"grasp the flower vase\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the curtain"}, {"role": "assistant", "content": "composer(\"push close the curtain by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the picture on the wall"}, {"role": "assistant", "content": "composer(\"grasp the picture\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the wall\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the clock and put it on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the clock\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the cabinet"}, {"role": "assistant", "content": "composer(\"grasp the cabinet handle, at 0.5x speed\")\ncomposer(\"move away from the cabinet handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the pillow on the bed"}, {"role": "assistant", "content": "composer(\"grasp the pillow\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the bed\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the stapler and put it on the desk"}, {"role": "assistant", "content": "composer(\"grasp the stapler\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the desk\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the door"}, {"role": "assistant", "content": "composer(\"push close the door by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the toy car on the track"}, {"role": "assistant", "content": "composer(\"grasp the toy car\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the track\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the folder and put it in the filing cabinet"}, {"role": "assistant", "content": "composer(\"grasp the folder\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the filing cabinet\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the blinds"}, {"role": "assistant", "content": "composer(\"grasp the blinds handle, at 0.5x speed\")\ncomposer(\"move away from the blinds handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the cup on the table"}, {"role": "assistant", "content": "composer(\"grasp the cup\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the book and put it on the bookshelf"}, {"role": "assistant", "content": "composer(\"grasp the book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the bookshelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the vase on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the vase\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the phone and put it on the phone holder"}, {"role": "assistant", "content": "composer(\"grasp the phone\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the phone holder\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the fridge door"}, {"role": "assistant", "content": "composer(\"grasp the fridge door handle, at 0.5x speed\")\ncomposer(\"move away from the fridge door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the file on the desk"}, {"role": "assistant", "content": "composer(\"grasp the file\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the desk\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the pen and put it on the table"}, {"role": "assistant", "content": "composer(\"grasp the pen\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the window"}, {"role": "assistant", "content": "composer(\"push close the window by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the toy on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the toy\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the glass and put it on the table"}, {"role": "assistant", "content": "composer(\"grasp the glass\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the curtain"}, {"role": "assistant", "content": "composer(\"grasp the curtain handle, at 0.5x speed\")\ncomposer(\"move away from the curtain handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the plate on the counter"}, {"role": "assistant", "content": "composer(\"grasp the plate\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the counter\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the book and put it on the bookcase"}, {"role": "assistant", "content": "composer(\"grasp the book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the bookcase\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the cup on the coffee table"}, {"role": "assistant", "content": "composer(\"grasp the cup\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the coffee table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the pencil and put it on the desk"}, {"role": "assistant", "content": "composer(\"grasp the pencil\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the desk\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the drawer"}, {"role": "assistant", "content": "composer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the toy on the floor"}, {"role": "assistant", "content": "composer(\"grasp the toy\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the floor\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the remote control and put it on the coffee table"}, {"role": "assistant", "content": "composer(\"grasp the remote control\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the coffee table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the cabinet"}, {"role": "assistant", "content": "composer(\"push close the cabinet by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the vase on the table"}, {"role": "assistant", "content": "composer(\"grasp the vase\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the folder and put it on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the folder\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the door"}, {"role": "assistant", "content": "composer(\"grasp the door handle, at 0.5x speed\")\ncomposer(\"move away from the door handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the cup on the counter"}, {"role": "assistant", "content": "composer(\"grasp the cup\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the counter\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the picture and put it on the wall"}, {"role": "assistant", "content": "composer(\"grasp the picture\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the wall\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the window"}, {"role": "assistant", "content": "composer(\"push close the window by 25cm\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the toy on the table"}, {"role": "assistant", "content": "composer(\"grasp the toy\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the book and put it on the nightstand"}, {"role": "assistant", "content": "composer(\"grasp the book\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the nightstand\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "open the closet"}, {"role": "assistant", "content": "composer(\"grasp the closet handle, at 0.5x speed\")\ncomposer(\"move away from the closet handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "put the vase on the shelf"}, {"role": "assistant", "content": "composer(\"grasp the vase\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the shelf\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "pick up the candle and put it on the coffee table"}, {"role": "assistant", "content": "composer(\"grasp the candle\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm on top of the coffee table\")\ncomposer(\"open gripper\")"}]
[{"role": "system", "content": "\nYou are a helpful assistant that pays attention to the user's queries and write python code that operates a robot arm and gripper in a tabletop environment.\nYou should follow the example below:\n```\nimport numpy as np\nfrom env_utils import execute\nfrom perception_utils import parse_query_obj\nimport action_utils import composer\n\nobjects = ['blue block', 'yellow block', 'mug']\n# Query: place the blue block on the yellow block, and avoid the mug at all time.\ncomposer(\"grasp the blue block while keeping at least 15cm away from the mug\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 5cm on top of the yellow block while keeping at least 15cm away from the mug\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['airpods', 'drawer']\n# Query: Open the drawer slowly.\ncomposer(\"grasp the drawer handle, at 0.5x speed\")\ncomposer(\"move away from the drawer handle by 25cm, at 0.5x speed\")\ncomposer(\"open gripper, at 0.5x speed\")\n# done\n\nobjects = ['tissue box', 'tissue', 'bowl']\n# Query: Can you pass me a tissue and place it next to the bowl?\ncomposer(\"grasp the tissue\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the bowl\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['charger', 'outlet']\n# Query: unplug the charger from the wall.\ncomposer(\"grasp the charger\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['grape', 'lemon', 'drill', 'router', 'bread', 'tray']\n# Query: put the sweeter fruit in the tray that contains the bread.\ncomposer(\"grasp the grape\")\ncomposer(\"back to default pose\")\ncomposer(\"move to the top of the tray that contains the bread\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['marbles', 'tray', 'broom']\n# Query: Can you sweep the marbles into the tray?\ncomposer(\"grasp the broom\")\ncomposer(\"back to default pose\")\ncomposer(\"push the marbles into the tray\")\n# done\n\nobjects = ['orange', 'QR code', 'lemon', 'drawer']\n# Query: put the sour fruit into the top drawer.\ncomposer(\"grasp the top drawer handle\")\ncomposer(\"move away from the top drawer handle by 25cm\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\ncomposer(\"grasp the lemon\")\ncomposer(\"move to 10cm on top of the top drawer\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['fridge', 'hot soup']\n# Query: Open the fridge door and be careful around the hot soup.\ncomposer(\"grasp the fridge handle and keep at least 15cm away from the hot soup\")\ncomposer(\"move away from the fridge handle by 25cm and keep at least 15cm away from the hot soup\")\ncomposer(\"open gripper\")\n# done\n\nobjects = ['cyan bowl', 'yellow bowl', 'box', 'ice cream']\n# Query: move to the top of the cyan bowl.\ncomposer(\"move to the top of the cyan bowl\")\n# done\n\nobjects = ['drawer', 'umbrella']\n# Query: close the drawer.\ncomposer(\"push close the drawer handle by 25cm\")\n# done\n\nobjects = ['iPhone', 'airpods']\n# Query: slide the iPhone towards the airpods.\ncomposer(\"push the iPhone towards the airpods\")\n# done\n\nobjects = ['plate', 'steak', 'fork', 'knife', 'spoon']\n# Query: Could you please set up the fork for the steak for me?\ncomposer(\"grasp the fork\")\ncomposer(\"back to default pose\")\ncomposer(\"move to 10cm to the right of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['lamp', 'switch']\n# Query: Turn off the lamp.\ncomposer(\"close the gripper\")\ncomposer(\"move to the center of the switch\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['beer']\n# Query: turn close the beer.\ncomposer(\"grasp the beer cap\")\ncomposer(\"turn clockwise by 180 degrees\")\ncomposer(\"back to default pose\")\n# done\n\nobjects = ['steak', 'grill', 'plate']\n# Query: Take the steak out of the grill and put it flat on the plate.\ncomposer(\"grasp the steak\")\ncomposer(\"back to default pose\")\ncomposer(\"rotate the gripper to be 45 degrees slanted relative to the plate\")\ncomposer(\"move to 10cm on top of the plate\")\ncomposer(\"open gripper\")\ncomposer(\"back to default pose\")\n# done\n```\n"}, {"role": "user", "content": "close the drawer"}, {"role": "assistant", "content": "composer(\"push close the drawer by 25cm\")"}]
